using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace PronPasswordGen
{
    public partial class HelpForm : Form
    {

        private string _text =
            @"The set of characters used to generate the passwords fall in the following categories:
- Alphabetic: a-z and A-Z (capitals)
- Numbers: 0-9
- Specials: including the characters ! +.,:;-_@$|#?><()[]^%&/=\{}`~*'ñ

Passwords are generated by concatenating ñchunksñ, each one consisting of a purely alphabetic or groups made of numbers and special characters.There are the following types of chunks:
+ Alphabetic(C= consonant, V= vowel)
    Direct(D): CV
    Direct with Diphthongs(DD): CVV
    Inverted(I): VC
    Inverted with Diphthongs(ID): VVC
    Mixed(M): CVC
    Liquid(L): C(l/r)V
+ Special: groups of 2-3 numbers, plus a symbol character, at the start or the end.

The following sequences of immediately contiguous chunks are forbidden:
    D.ID
    DD.I
    DD.ID
    S.S

Also, the relative weight (probability of occurring) of the different kinds of alphabetic chunks can be adjusted.

Alphabetic chunks can be ñcapitalizedñ by converting one (more rarely two or more) characters to upper case

Special characters can be customized.Blanks (spaces) can be explicitly allowed(in case it's part of the set of special characters) or forbidden.

Finally, separators can be inserted between contiguous chunks.The separator can be always the same or a set of separators can be inserted, while rotating in turn.

- The entropy (H) of a password is computed so: entropy = password_length* log2(cardinality). The result is given in bits.
- For calculating the entropy of a password:
	- in case it includes at least one special character, the full set of them(34) is supposed it has been used for generating the password
	- in case the password includes some character which is not part of any of the predefined set, the cardinality is increased accordingly.
- For assessing the strength of the password, both qualitatively and quantitatively (0-100), it has been used the code by Peter Tewkesbury(https://www.codeproject.com/Articles/59186/Password-Strength-Control-2)

In the table of generated passwords they are given a rank, based on their entropy and strength values.It's advisable to choose passwords with larger entropies over those with an apparently larger strength value but with a lesser entropy.".Replace("ñ", "\"");



        public HelpForm()
        {
            InitializeComponent();
        }

        private void HelpForm_Load(object sender, EventArgs e)
        {
            tbHelp.Text = _text;
        }
    }
}
